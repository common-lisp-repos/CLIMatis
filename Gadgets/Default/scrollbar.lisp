(cl:in-package #:clim3-gadgets-default)

(defclass vbar (clim3:standard-zone
		clim3-ext:atomic-mixin)
  ()
  (:default-initargs :hsprawl (clim3-sprawl:sprawl 0 0 nil)
		     :vsprawl (clim3-sprawl:sprawl 0 0 nil)))

(defmethod clim3-ext:paint ((zone vbar))
  (let ((fg (clim3-gadgets:foreground-color clim3-gadgets:*theme*))
	(black (clim3:make-color 0d0 0d0 0d0))
	(white (clim3:make-color 1d0 1d0 1d0))
	(factor 0.5) ; should be less than (/ (sqrt 2))
	(width (clim3:width zone))
	(height (clim3:height zone)))
    (let ((fgr (clim3:red fg))
	  (fgg (clim3:green fg))
	  (fgb (clim3:blue fg))
	  (w/2 (floor width 2)))
      (flet ((maybe-paint-top (c r x y)
	       (when (<= (+ (* x x) (* y y)) (/ (*  width width) 4d0))
		 (clim3:with-position (c r)
		   (clim3:paint-pixel fgr fgg fgb 1d0)
		   (let ((opacity (* factor (/ (+ x y) (/ width 2)))))
		     (if (minusp opacity)
			 (clim3:paint-pixel 0d0 0d0 0d0 (- opacity))
			 (clim3:paint-pixel 1d0 1d0 1d0 opacity))))))
	     (maybe-paint-bottom (c r x y)
	       (when (<= (+ (* x x) (* y y)) (/ (*  width width) 4d0))
		 (clim3:with-position (c r)
		   (clim3:paint-pixel fgr fgg fgb 1d0)
		   (let ((opacity (* factor (/ (+ x y) (/ width 2)))))
		     (if (minusp opacity)
			 (clim3:paint-pixel 1d0 1d0 1d0 (- opacity))
			 (clim3:paint-pixel 0d0 0d0 0d0 opacity)))))))
	(when (and (>= width 3) (>= height (* 3 width)))
	  (loop for c from 0 below width
		for x = (- (/ width 2d0) (+ c 0.5d0))
		do (loop for r from 0 below w/2
			 for y = (- (/ width 2d0) (+ r 0.5d0))
			 do (maybe-paint-top c r x y)))
	  (loop for c from 0 below width
		for x = (- (/ width 2d0) (+ c 0.5d0))
		for opacity = (* factor (/ x (/ width 2)))
		do (clim3:with-area (c w/2 1 (- height (* 2 w/2)))
		     (clim3:paint-opaque fg)
		     (if (minusp opacity)
			 (clim3:paint-translucent black (- opacity))
			 (clim3:paint-translucent white opacity))))
	  (loop for c from 0 below width
		for x = (- (+ c 0.5d0) (/ width 2d0))
		do (loop for r from (- height w/2) below height
			 for y = (- (+ r 0.5d0) (- height (/ width 2d0)))
			 do (maybe-paint-bottom c r x y))))))))
			  
(defclass vditch (clim3:standard-zone
		     clim3-ext:atomic-mixin)
  ()
  (:default-initargs :hsprawl (clim3-sprawl:sprawl 0 0 nil)
		     :vsprawl (clim3-sprawl:sprawl 0 0 nil)))

(defmethod clim3-ext:paint ((zone vditch))
  (let ((bg (clim3-gadgets:background-color clim3-gadgets:*theme*))
	(black (clim3:make-color 0d0 0d0 0d0))
	(white (clim3:make-color 1d0 1d0 1d0))
	(factor 0.5) ; should be less than (/ (sqrt 2))
	(width (clim3:width zone))
	(height (clim3:height zone)))
    (clim3:with-zone zone
      (clim3:paint-opaque bg))
    (let ((bgr (clim3:red bg))
	  (bgg (clim3:green bg))
	  (bgb (clim3:blue bg))
	  (w/2 (floor width 2)))
      (flet ((maybe-paint-top (c r x y)
	       (when (<= (+ (* x x) (* y y)) (/ (*  width width) 4d0))
		 (clim3:with-position (c r)
		   (clim3:paint-pixel bgr bgg bgb 1d0)
		   (let ((opacity (* factor (/ (+ x y) (/ width 2)))))
		     (if (minusp opacity)
			 (clim3:paint-pixel 1d0 1d0 1d0 (- opacity))
			 (clim3:paint-pixel 0d0 0d0 0d0 opacity))))))
	     (maybe-paint-bottom (c r x y)
	       (when (<= (+ (* x x) (* y y)) (/ (*  width width) 4d0))
		 (clim3:with-position (c r)
		   (clim3:paint-pixel bgr bgg bgb 1d0)
		   (let ((opacity (* factor (/ (+ x y) (/ width 2)))))
		     (if (minusp opacity)
			 (clim3:paint-pixel 0d0 0d0 0d0 (- opacity))
			 (clim3:paint-pixel 1d0 1d0 1d0 opacity)))))))
	(when (and (>= width 3) (>= height (* 3 width)))
	  (loop for c from 0 below width
		for x = (- (/ width 2d0) (+ c 0.5d0))
		do (loop for r from 0 below w/2
			 for y = (- (/ width 2d0) (+ r 0.5d0))
			 do (maybe-paint-top c r x y)))
	  (loop for c from 0 below width
		for x = (- (/ width 2d0) (+ c 0.5d0))
		for opacity = (* factor (/ x (/ width 2)))
		do (clim3:with-area (c w/2 1 (- height (* 2 w/2)))
		     (clim3:paint-opaque bg)
		     (if (minusp opacity)
			 (clim3:paint-translucent white (- opacity))
			 (clim3:paint-translucent black opacity))))
	  (loop for c from 0 below width
		for x = (- (+ c 0.5d0) (/ width 2d0))
		do (loop for r from (- height w/2) below height
			 for y = (- (+ r 0.5d0) (- height (/ width 2d0)))
			 do (maybe-paint-bottom c r x y))))))))

(defclass vscrollbar (clim3:pile)
  ())

(defmethod initialize-instance :after
    ((zone vscrollbar) &key scroller &allow-other-keys)
  (let* ((vbrick (clim3:hbrick 13))
	 (vbar (make-instance 'vbar))
	 (abstract-scrollbar (clim3:vscrollbar scroller vbar))
	 (vditch (make-instance 'vditch)))
    (setf (clim3:depth vditch) 100)
    (setf (clim3:children zone)
	  (list vbrick vditch abstract-scrollbar))))
	
